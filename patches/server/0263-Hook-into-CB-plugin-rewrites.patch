From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Wed, 3 Oct 2018 20:09:18 -0400
Subject: [PATCH] Hook into CB plugin rewrites

Allows us to do fun stuff like rewrite the OBC util fastutil location to
our own relocation. Also lets us rewrite NMS calls for when we're
debugging in an IDE pre-relocate.

diff --git a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
index 754beb0b96e6b645630fa72dd67ea953c7470dfc..8a2914d2b9683be14943066fcba21519145f9467 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
@@ -150,6 +150,35 @@ public class Commodore {
         Commodore.TYPE_INSTRUCTIONS.add(new TypeInstructionInfo(preEnumKill, enumCompatibility, owner, newOwner));
     }
 
+    // Paper start - Plugin rewrites
+    private static final java.util.Map<String, String> SEARCH_AND_REMOVE = initReplacementsMap();
+    private static java.util.Map<String, String> initReplacementsMap() {
+        java.util.Map<String, String> getAndRemove = new java.util.HashMap<>();
+        // Be wary of maven shade's relocations
+
+        final java.util.jar.Manifest manifest = io.papermc.paper.util.JarManifests.manifest(Commodore.class);
+        if (Boolean.getBoolean("debug.rewriteForIde") && manifest != null) {
+            // unversion incoming calls for pre-relocate debug work
+            final String NMS_REVISION_PACKAGE = "v" + manifest.getMainAttributes().getValue("CraftBukkit-Package-Version") + "/";
+
+            getAndRemove.put("org/bukkit/".concat("craftbukkit/" + NMS_REVISION_PACKAGE), NMS_REVISION_PACKAGE);
+        }
+
+        return getAndRemove;
+    }
+
+    private static String getOriginalOrRewrite(String original) {
+        String rewrite = null;
+        for (java.util.Map.Entry<String, String> entry : SEARCH_AND_REMOVE.entrySet()) {
+            if (original.contains(entry.getKey())) {
+                rewrite = original.replace(entry.getValue(),"");
+            }
+        }
+
+        return rewrite != null ? rewrite : original;
+    }
+    // Paper end
+
     public static void main(String[] args) {
         OptionParser parser = new OptionParser();
         OptionSpec<File> inputFlag = parser.acceptsAll(Arrays.asList("i", "input")).withRequiredArg().ofType(File.class).required();
@@ -219,6 +248,12 @@ public class Commodore {
         cr.accept(new ClassVisitor(Opcodes.ASM9, cw) {
             @Override
             public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
+                // Paper start - Rewrite plugins
+                desc = getOriginalOrRewrite( desc );
+                if ( signature != null ) {
+                    signature = getOriginalOrRewrite( signature );
+                }
+                // Paper end
                 for (TypeInstructionInfo typeInstructionInfo : Commodore.TYPE_INSTRUCTIONS) {
                     if (preEnumKilling != typeInstructionInfo.preEnumKill) {
                         continue;
@@ -276,6 +311,13 @@ public class Commodore {
                 return new MethodVisitor(api, super.visitMethod(access, name, desc, signature, exceptions)) {
                     @Override
                     public void visitFieldInsn(int opcode, String owner, String name, String desc) {
+                        // Paper start - Rewrite plugins
+                        owner = getOriginalOrRewrite( owner );
+                        if ( desc != null )
+                        {
+                            desc = getOriginalOrRewrite( desc );
+                        }
+                        // Paper end
                         if (owner.equals("org/bukkit/block/Biome")) {
                             switch (name) {
                                 case "NETHER":
@@ -857,6 +899,11 @@ public class Commodore {
                         }
 
                         // Paper start - Rewrite plugins
+                        owner = getOriginalOrRewrite( owner) ;
+                        if (desc != null)
+                        {
+                            desc = getOriginalOrRewrite(desc);
+                        }
                         if ((owner.equals("org/bukkit/OfflinePlayer") || owner.equals("org/bukkit/entity/Player")) && name.equals("getPlayerProfile") && desc.equals("()Lorg/bukkit/profile/PlayerProfile;")) {
                             super.visitMethodInsn(opcode, owner, name, "()Lcom/destroystokyo/paper/profile/PlayerProfile;", itf);
                             return;
@@ -1042,6 +1089,13 @@ public class Commodore {
 
                     @Override
                     public void visitLdcInsn(Object value) {
+                        // Paper start - Rewrite plugins
+                        if (value instanceof Type type) {
+                            if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {
+                                value = Type.getType(getOriginalOrRewrite(type.getDescriptor()));
+                            }
+                        }
+                        // Paper end
                         if (value instanceof String && ((String) value).equals("com.mysql.jdbc.Driver")) {
                             super.visitLdcInsn("com.mysql.cj.jdbc.Driver");
                             return;
@@ -1052,6 +1106,7 @@ public class Commodore {
 
                     @Override
                     public void visitTypeInsn(int opcode, String type) {
+                        type = getOriginalOrRewrite(type); // Paper - Rewrite plugins
                         for (TypeInstructionInfo typeInstructionInfo : Commodore.TYPE_INSTRUCTIONS) {
                             if (preEnumKilling != typeInstructionInfo.preEnumKill) {
                                 continue;
@@ -1069,6 +1124,7 @@ public class Commodore {
 
                     @Override
                     public void visitLocalVariable(String name, String descriptor, String signature, Label start, Label end, int index) {
+                        descriptor = getOriginalOrRewrite(descriptor); // Paper - Rewrite plugins
                         for (TypeInstructionInfo typeInstructionInfo : Commodore.TYPE_INSTRUCTIONS) {
                             if (preEnumKilling != typeInstructionInfo.preEnumKill) {
                                 continue;
@@ -1086,6 +1142,12 @@ public class Commodore {
 
                     @Override
                     public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments) {
+                        // Paper start - Rewrite plugins
+                        name = getOriginalOrRewrite(name);
+                        if (descriptor != null) {
+                            descriptor = getOriginalOrRewrite(descriptor);
+                        }
+                        // Paper end
 
                         if (bootstrapMethodHandle.getOwner().equals("java/lang/invoke/LambdaMetafactory")
                                 && bootstrapMethodHandle.getName().equals("metafactory") && bootstrapMethodArguments.length == 3) {
@@ -1211,6 +1273,19 @@ public class Commodore {
 
                     @Override
                     public void visitFrame(int type, int numLocal, Object[] local, int numStack, Object[] stack) {
+                        // Paper start - Rewrite plugins
+                        for (int i = 0; i < local.length; i++) {
+                            if (!(local[i] instanceof String)) { continue; }
+
+                            local[i] = getOriginalOrRewrite((String) local[i]);
+                        }
+
+                        for (int i = 0; i < stack.length; i++) {
+                            if (!(stack[i] instanceof String)) continue;
+
+                            stack[i] = getOriginalOrRewrite((String) stack[i]);
+                        }
+                        // Paper end
                         Object[] newLocal = new Object[local.length];
                         Object[] newStack = new Object[stack.length];
 
