From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Wed, 2 Jan 2019 00:35:43 -0600
Subject: [PATCH] Add APIs to replace OfflinePlayer#getLastPlayed

Currently OfflinePlayer#getLastPlayed could more accurately be described
as "OfflinePlayer#getLastTimeTheirDataWasSaved".

The API doc says it should return the last time the server "witnessed"
the player, whilst also saying it should return the last time they
logged in. The current implementation does neither.

Given this interesting contradiction in the API documentation and the
current defacto implementation, I've elected to deprecate (with no
intent to remove) and replace it with two new methods, clearly named and
documented as to their purpose.

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 56a9cfdb9dc24bd5bda2818b9f59d1a31dfe9265..7cb4f05a8d23a60a89dd4934ccb99bb89bb44141 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -243,6 +243,7 @@ public class ServerPlayer extends Player {
     public int latency;
     public boolean wonGame;
     private int containerUpdateDelay; // Paper
+    public long loginTime; // Paper
     // Paper start - cancellable death event
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.network.protocol.game.ClientboundSetHealthPacket queuedHealthUpdatePacket;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 2bccba03bb12cf17a82c1e54c2bb10535b7c8964..5657493e215a17f3132f9d411424875160fda6d9 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -189,6 +189,7 @@ public abstract class PlayerList {
 
     public void placeNewPlayer(Connection connection, ServerPlayer player) {
         player.isRealPlayer = true; // Paper
+        player.loginTime = System.currentTimeMillis(); // Paper
         GameProfile gameprofile = player.getGameProfile();
         GameProfileCache usercache = this.server.getProfileCache();
         String s;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index d870cd9cf7453cc13aafed9f5205e7c28b1a9cdc..ffc31edc50cc19deead448856a0d6fb592bb7401 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -252,6 +252,61 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return this.getData() != null;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastLogin();
+
+        CompoundTag data = getPaperData();
+
+        if (data != null) {
+            if (data.contains("LastLogin")) {
+                return data.getLong("LastLogin");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    @Override
+    public long getLastSeen() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastSeen();
+
+        CompoundTag data = getPaperData();
+
+        if (data != null) {
+            if (data.contains("LastSeen")) {
+                return data.getLong("LastSeen");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    private CompoundTag getPaperData() {
+        CompoundTag result = getData();
+
+        if (result != null) {
+            if (!result.contains("Paper")) {
+                result.put("Paper", new CompoundTag());
+            }
+            result = result.getCompound("Paper");
+        }
+
+        return result;
+    }
+    // Paper end
+
     @Override
     public Location getLastDeathLocation() {
         if (this.getData().contains("LastDeathLocation", 10)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 9c422287436c8497d26ab99466fd1386fca6c3a0..40d49a9e7598872596949d07dc56d6e00cfd1a7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -186,6 +186,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
     private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
+    private long lastSaveTime;
     // Paper end
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
@@ -1895,6 +1896,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.firstPlayed = firstPlayed;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        return getHandle().loginTime;
+    }
+
+    @Override
+    public long getLastSeen() {
+        return isOnline() ? System.currentTimeMillis() : this.lastSaveTime;
+    }
+    // Paper end
+
     public void readExtraData(CompoundTag nbttagcompound) {
         this.hasPlayedBefore = true;
         if (nbttagcompound.contains("bukkit")) {
@@ -1917,6 +1930,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setExtraData(CompoundTag nbttagcompound) {
+        this.lastSaveTime = System.currentTimeMillis(); // Paper
+
         if (!nbttagcompound.contains("bukkit")) {
             nbttagcompound.put("bukkit", new CompoundTag());
         }
@@ -1931,6 +1946,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.putLong("firstPlayed", this.getFirstPlayed());
         data.putLong("lastPlayed", System.currentTimeMillis());
         data.putString("lastKnownName", handle.getScoreboardName());
+
+        // Paper start - persist for use in offline save data
+        if (!nbttagcompound.contains("Paper")) {
+            nbttagcompound.put("Paper", new CompoundTag());
+        }
+
+        CompoundTag paper = nbttagcompound.getCompound("Paper");
+        paper.putLong("LastLogin", handle.loginTime);
+        paper.putLong("LastSeen", System.currentTimeMillis());
+        // Paper end
     }
 
     @Override
