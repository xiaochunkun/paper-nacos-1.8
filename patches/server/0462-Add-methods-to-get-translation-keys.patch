From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 11 Aug 2020 19:16:09 +0200
Subject: [PATCH] Add methods to get translation keys

== AT ==
public org.bukkit.craftbukkit.inventory.CraftMetaFirework
public org.bukkit.craftbukkit.inventory.CraftMetaFirework getNBT(Lorg/bukkit/FireworkEffect$Type;)I

Co-authored-by: MeFisto94 <MeFisto94@users.noreply.github.com>

diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
index 6ceb36931b98b4e205ac52211cfbae4337a4ff45..0571224316424980b726cdf1d5bbc25115975c94 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
@@ -72,6 +72,13 @@ public class CraftAttribute extends Attribute {
         return this.ordinal;
     }
 
+    // Paper start - translation key
+    @Override
+    public String translationKey() {
+        return this.attributeBase.getDescriptionId();
+    }
+    // Paper end
+
     @Override
     public String toString() {
         // For backwards compatibility
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
index b350c4e30927bf020784f0fe39850f10e0fd9133..9cc5234409bdf71f3dbbf3947f365ce86634ade3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
@@ -43,6 +43,7 @@ public class CraftBiome extends Biome {
     private final net.minecraft.world.level.biome.Biome biome;
     private final String name;
     private final int ordinal;
+    private final net.minecraft.resources.ResourceLocation resourceLocation; // Paper
 
     public CraftBiome(NamespacedKey key, net.minecraft.world.level.biome.Biome biome) {
         this.key = key;
@@ -57,8 +58,16 @@ public class CraftBiome extends Biome {
             this.name = key.toString();
         }
         this.ordinal = CraftBiome.count++;
+        this.resourceLocation = CraftNamespacedKey.toMinecraft(this.key); // Paper
     }
 
+    // Paper start - translation keys
+    @Override
+    public String translationKey() {
+        return this.resourceLocation.toLanguageKey("biome");
+    }
+    // Paper end
+
     public net.minecraft.world.level.biome.Biome getHandle() {
         return this.biome;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index c5e98a0147e6eed86fc02e8681d8b476ca8f13f6..16cec4f1dc9020074576a3c5fff95580520377f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -668,5 +668,10 @@ public class CraftBlock implements Block {
     public org.bukkit.SoundGroup getBlockSoundGroup() {
         return org.bukkit.craftbukkit.CraftSoundGroup.getSoundGroup(this.getNMS().getSoundType());
     }
+
+    @Override
+    public String translationKey() {
+        return this.getNMS().getBlock().getDescriptionId();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
index fab5edd8e40bb8dc4923034ee46528356334431b..719273eeaab49570ef7efd5197c2f241a875e434 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
@@ -168,4 +168,11 @@ public class CraftBlockType<B extends BlockData> implements BlockType<B> {
     public NamespacedKey getKey() {
         return this.key;
     }
+
+    // Paper start - translation key
+    @Override
+    public String translationKey() {
+        return this.block.getDescriptionId();
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 62b75098ae26cbcc331d3b23940b7da46ccf2cfe..92cecdae6a4ab7c2876a42c7128453948a5a249a 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -122,6 +122,11 @@ public class CraftEnchantment extends Enchantment {
     public net.kyori.adventure.text.Component displayName(int level) {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().getFullname(level));
     }
+
+    @Override
+    public String translationKey() {
+        return this.target.getDescriptionId();
+    }
     // Paper end
 
     public net.minecraft.world.item.enchantment.Enchantment getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
index fbd436df49b2a5d356ba84a94828eb1bc2cd7d1b..33be9fa46c3bdb4958b32d30c730ceff075aaaea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
@@ -157,6 +157,13 @@ public class CraftEntityType<E extends Entity> extends EntityType<E> {
         return this.entityType.getDescriptionId();
     }
 
+    // Paper start - translation key
+    @Override
+    public String translationKey() {
+        return this.entityType.getDescriptionId();
+    }
+    // Paper end
+
     public static class CraftEntityTypeRegistry extends CraftRegistry<EntityType<?>, net.minecraft.world.entity.EntityType<?>> {
         private static final Map<NamespacedKey, Class<? extends Entity>> CLASS_MAP = new HashMap<>();
         private static final Map<NamespacedKey, Boolean> SPAWNABLE = new HashMap<>();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index c5f3ed36957d52120ad95f28e655e63bb0a50ff4..eeca610110a058d704b72674e0f2df72982ca039 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -281,6 +281,13 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
             return this.key;
         }
 
+        // Paper start - translation key
+        @Override
+        public String translationKey() {
+            return net.minecraft.world.entity.EntityType.VILLAGER.getDescriptionId() + "." + this.key().value();
+        }
+        // Paper end
+
         @Override
         public int compareTo(Profession profession) {
             return this.ordinal - profession.ordinal();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
index e540f986a0da8002e669e9f1885ba601be3d1371..49be8074280d9840bb3d8e6880b4e0a8aa4ef0cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
@@ -135,4 +135,11 @@ public class CraftItemType implements ItemType {
     public NamespacedKey getKey() {
         return this.key;
     }
+
+    // Paper start - translation key
+    @Override
+    public String translationKey() {
+        return this.item.getDescriptionId();
+    }
+    // Paper end
 }
diff --git a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
index fab3063fffa959ac7f0eb5937f2fae94d11b6591..daef5db580c6182ca10a5950eb1d4fb647910e63 100644
--- a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
+++ b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
@@ -1,12 +1,23 @@
 package io.papermc.paper.world;
 
 import com.destroystokyo.paper.ClientOption;
+import java.util.Map;
+import net.minecraft.network.chat.contents.TranslatableContents;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.entity.player.ChatVisiblity;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.biome.Biome;
 import org.bukkit.Difficulty;
+import org.bukkit.FireworkEffect;
+import org.bukkit.GameMode;
+import org.bukkit.GameRule;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.support.AbstractTestingBase;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
-public class TranslationKeyTest {
+public class TranslationKeyTest extends AbstractTestingBase {
 
     @Test
     public void testChatVisibilityKeys() {
@@ -15,4 +26,58 @@ public class TranslationKeyTest {
             Assert.assertEquals(chatVisibility + "'s translation key doesn't match", ChatVisiblity.valueOf(chatVisibility.name()).getKey(), chatVisibility.translationKey());
         }
     }
+
+    @Test
+    public void testDifficultyKeys() {
+        for (Difficulty bukkitDifficulty : Difficulty.values()) {
+            Assert.assertEquals(bukkitDifficulty + "'s translation key doesn't match", ((TranslatableContents) net.minecraft.world.Difficulty.byId(bukkitDifficulty.ordinal()).getDisplayName().getContents()).getKey(), bukkitDifficulty.translationKey());
+        }
+    }
+
+    @Test
+    public void testGameruleKeys() {
+        for (GameRule<?> rule : GameRule.values()) {
+            Assert.assertEquals(rule.getName() + "'s translation doesn't match", org.bukkit.craftbukkit.CraftWorld.getGameRulesNMS().get(rule.getName()).getDescriptionId(), rule.translationKey());
+        }
+    }
+
+    @Test
+    public void testAttributeKeys() {
+        for (Attribute attribute : Attribute.values()) {
+            Assert.assertEquals("translation key mismatch for " + attribute, org.bukkit.craftbukkit.attribute.CraftAttribute.bukkitToMinecraft(attribute).getDescriptionId(), attribute.translationKey());
+        }
+    }
+
+    @Test
+    public void testFireworkEffectType() {
+        for (FireworkEffect.Type type : FireworkEffect.Type.values()) {
+            Assert.assertEquals("translation key mismatch for " + type, net.minecraft.world.item.FireworkRocketItem.Shape.byId(org.bukkit.craftbukkit.inventory.CraftMetaFirework.getNBT(type)).getName(), org.bukkit.FireworkEffect.Type.NAMES.key(type));
+        }
+    }
+
+    @Test
+    @Ignore // TODO fix
+    public void testCreativeCategory() {
+        // for (CreativeModeTab tab : CreativeModeTabs.tabs()) {
+        //     CreativeCategory category = Objects.requireNonNull(CraftCreativeCategory.fromNMS(tab));
+        //     Assert.assertEquals("translation key mismatch for " + category, ((TranslatableContents) tab.getDisplayName().getContents()).getKey(), category.translationKey());
+        // }
+    }
+
+    @Test
+    public void testGameMode() {
+        for (GameType nms : GameType.values()) {
+            GameMode bukkit = GameMode.getByValue(nms.getId());
+            Assert.assertNotNull(bukkit);
+            Assert.assertEquals("translation key mismatch for " + bukkit, ((TranslatableContents) nms.getLongDisplayName().getContents()).getKey(), bukkit.translationKey());
+        }
+    }
+
+    @Test
+    public void testBiome() {
+        for (Map.Entry<ResourceKey<Biome>, Biome> nms : AbstractTestingBase.BIOMES.entrySet()) {
+            org.bukkit.block.Biome bukkit = org.bukkit.block.Biome.valueOf(nms.getKey().location().getPath().toUpperCase());
+            Assert.assertEquals("translation key mismatch for " + bukkit, nms.getKey().location().toLanguageKey("biome"), bukkit.translationKey());
+        }
+    }
 }
