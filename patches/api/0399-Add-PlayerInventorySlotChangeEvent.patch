From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jakub Zacek <dawon@dawon.eu>
Date: Sun, 24 Apr 2022 22:56:31 +0200
Subject: [PATCH] Add PlayerInventorySlotChangeEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerInventorySlotChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerInventorySlotChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..f106d2c6fb349c57ed00f1d7f96efacb1ade3959
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerInventorySlotChangeEvent.java
@@ -0,0 +1,84 @@
+package com.destroystokyo.paper.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a slot contents change in a player's inventory.
+ */
+public class PlayerInventorySlotChangeEvent extends PlayerEvent {
+    private static final HandlerList handlers = new HandlerList();
+    private final int slot;
+    private final ItemStack oldItemStack;
+    private final ItemStack newItemStack;
+    private boolean triggerAdvancements = true;
+
+    public PlayerInventorySlotChangeEvent(@NotNull Player player, int slot, @NotNull ItemStack oldItemStack, @NotNull ItemStack newItemStack) {
+        super(player);
+        this.slot = slot;
+        this.oldItemStack = oldItemStack;
+        this.newItemStack = newItemStack;
+    }
+
+    /**
+     * The slot number that was changed.
+     *
+     * @return The slot number.
+     */
+    public int getSlot() {
+        return slot;
+    }
+
+    /**
+     * Clone of ItemStack that was in the slot before the change.
+     *
+     * @return The old ItemStack in the slot.
+     */
+    @NotNull
+    public ItemStack getOldItemStack() {
+        return oldItemStack;
+    }
+
+    /**
+     * Clone of ItemStack that is in the slot after the change.
+     *
+     * @return The new ItemStack in the slot.
+     */
+    @NotNull
+    public ItemStack getNewItemStack() {
+        return newItemStack;
+    }
+
+    /**
+     * Gets whether the slot change advancements will be triggered.
+     *
+     * @return Whether the slot change advancements will be triggered.
+     */
+    public boolean isTriggerAdvancements() {
+        return triggerAdvancements;
+    }
+
+    /**
+     * Sets whether the slot change advancements will be triggered.
+     *
+     * @param triggerAdvancements Whether the slot change advancements will be triggered.
+     */
+    public void setTriggerAdvancements(boolean triggerAdvancements) {
+        this.triggerAdvancements = triggerAdvancements;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
