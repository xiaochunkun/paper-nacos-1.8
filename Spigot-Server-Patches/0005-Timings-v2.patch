From 33e58793766f42ddd9b8d575ac47a4fd1e7e3674 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 3 Mar 2016 04:00:11 -0600
Subject: [PATCH] Timings v2


diff --git a/pom.xml b/pom.xml
index b4f523866..d751230bd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -70,6 +70,12 @@
             <version>5.1.37</version>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>co.aikar</groupId>
+            <artifactId>fastutil-lite</artifactId>
+            <version>1.0</version>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>net.sf.trove4j</groupId>
             <artifactId>trove4j</artifactId>
diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
new file mode 100644
index 000000000..0f8315cde
--- /dev/null
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -0,0 +1,110 @@
+package co.aikar.timings;
+
+import net.minecraft.server.*;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitTask;
+
+import org.bukkit.craftbukkit.scheduler.CraftTask;
+
+public final class MinecraftTimings {
+
+    public static final Timing playerListTimer = Timings.ofSafe("Player List");
+    public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
+    public static final Timing tickablesTimer = Timings.ofSafe("Tickables");
+    public static final Timing minecraftSchedulerTimer = Timings.ofSafe("Minecraft Scheduler");
+    public static final Timing bukkitSchedulerTimer = Timings.ofSafe("Bukkit Scheduler");
+    public static final Timing chunkIOTickTimer = Timings.ofSafe("ChunkIOTick");
+    public static final Timing timeUpdateTimer = Timings.ofSafe("Time Update");
+    public static final Timing serverCommandTimer = Timings.ofSafe("Server Command");
+    public static final Timing worldSaveTimer = Timings.ofSafe("World Save");
+
+    public static final Timing tickEntityTimer = Timings.ofSafe("## tickEntity");
+    public static final Timing tickTileEntityTimer = Timings.ofSafe("## tickTileEntity");
+
+    public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
+
+    public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
+
+    public static final Timing entityActivationCheckTimer = Timings.ofSafe("entityActivationCheck");
+
+    public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
+    public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
+
+    private MinecraftTimings() {}
+
+    /**
+     * Gets a timer associated with a plugins tasks.
+     * @param bukkitTask
+     * @param period
+     * @return
+     */
+    public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
+        if (!bukkitTask.isSync()) {
+            return null;
+        }
+        Plugin plugin;
+
+        Runnable task = ((CraftTask) bukkitTask).task;
+
+        final Class<? extends Runnable> taskClass = task.getClass();
+        if (bukkitTask.getOwner() != null) {
+            plugin = bukkitTask.getOwner();
+        } else {
+            plugin = TimingsManager.getPluginByClassloader(taskClass);
+        }
+
+        final String taskname;
+        if (taskClass.isAnonymousClass()) {
+            taskname = taskClass.getName();
+        } else {
+            taskname = taskClass.getCanonicalName();
+        }
+
+        String name = "Task: " +taskname;
+        if (period > 0) {
+            name += " (interval:" + period +")";
+        } else {
+            name += " (Single)";
+        }
+
+        if (plugin == null) {
+            return Timings.ofSafe(null, name, TimingsManager.PLUGIN_GROUP_HANDLER);
+        }
+
+        return Timings.ofSafe(plugin, name);
+    }
+
+    /**
+     * Get a named timer for the specified entity type to track type specific timings.
+     * @param entity
+     * @return
+     */
+    public static Timing getEntityTimings(Entity entity) {
+        String entityType = entity.getClass().getName();
+        return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType, tickEntityTimer);
+    }
+
+    /**
+     * Get a named timer for the specified tile entity type to track type specific timings.
+     * @param entity
+     * @return
+     */
+    public static Timing getTileEntityTimings(TileEntity entity) {
+        String entityType = entity.getClass().getName();
+        return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
+    }
+    public static Timing getCancelTasksTimer() {
+        return Timings.ofSafe("Cancel Tasks");
+    }
+    public static Timing getCancelTasksTimer(Plugin plugin) {
+        return Timings.ofSafe(plugin, "Cancel Tasks");
+    }
+
+    public static void stopServer() {
+        TimingsManager.stopServer();
+    }
+
+    public static Timing getBlockTiming(Block block) {
+        return Timings.ofSafe("## Scheduled Block: " + block.getName());
+    }
+}
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
new file mode 100644
index 000000000..741da72e0
--- /dev/null
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -0,0 +1,85 @@
+package co.aikar.timings;
+
+import net.minecraft.server.World;
+
+/**
+ * Set of timers per world, to track world specific timings.
+ */
+public class WorldTimingsHandler {
+    public final Timing mobSpawn;
+    public final Timing doChunkUnload;
+    public final Timing doPortalForcer;
+    public final Timing scheduledBlocks;
+    public final Timing scheduledBlocksCleanup;
+    public final Timing scheduledBlocksTicking;
+    public final Timing chunkTicks;
+    public final Timing chunkTicksBlocks;
+    public final Timing doVillages;
+    public final Timing doChunkMap;
+    public final Timing doChunkMapUpdate;
+    public final Timing doChunkMapToUpdate;
+    public final Timing doChunkMapSortMissing;
+    public final Timing doChunkMapSortSendToPlayers;
+    public final Timing doChunkMapPlayersNeedingChunks;
+    public final Timing doChunkMapPendingSendToPlayers;
+    public final Timing doChunkMapUnloadChunks;
+    public final Timing doChunkGC;
+    public final Timing doSounds;
+    public final Timing entityRemoval;
+    public final Timing entityTick;
+    public final Timing tileEntityTick;
+    public final Timing tileEntityPending;
+    public final Timing tracker1;
+    public final Timing tracker2;
+    public final Timing doTick;
+    public final Timing tickEntities;
+
+    public final Timing syncChunkLoadTimer;
+    public final Timing syncChunkLoadDataTimer;
+    public final Timing syncChunkLoadStructuresTimer;
+    public final Timing syncChunkLoadEntitiesTimer;
+    public final Timing syncChunkLoadTileEntitiesTimer;
+    public final Timing syncChunkLoadTileTicksTimer;
+    public final Timing syncChunkLoadPostTimer;
+
+    public WorldTimingsHandler(World server) {
+        String name = server.worldData.getName() +" - ";
+
+        mobSpawn = Timings.ofSafe(name + "mobSpawn");
+        doChunkUnload = Timings.ofSafe(name + "doChunkUnload");
+        scheduledBlocks = Timings.ofSafe(name + "Scheduled Blocks");
+        scheduledBlocksCleanup = Timings.ofSafe(name + "Scheduled Blocks - Cleanup");
+        scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
+        chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
+        chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
+        doVillages = Timings.ofSafe(name + "doVillages");
+        doChunkMap = Timings.ofSafe(name + "doChunkMap");
+        doChunkMapUpdate = Timings.ofSafe(name + "doChunkMap - Update");
+        doChunkMapToUpdate = Timings.ofSafe(name + "doChunkMap - To Update");
+        doChunkMapSortMissing = Timings.ofSafe(name + "doChunkMap - Sort Missing");
+        doChunkMapSortSendToPlayers = Timings.ofSafe(name + "doChunkMap - Sort Send To Players");
+        doChunkMapPlayersNeedingChunks = Timings.ofSafe(name + "doChunkMap - Players Needing Chunks");
+        doChunkMapPendingSendToPlayers = Timings.ofSafe(name + "doChunkMap - Pending Send To Players");
+        doChunkMapUnloadChunks = Timings.ofSafe(name + "doChunkMap - Unload Chunks");
+        doSounds = Timings.ofSafe(name + "doSounds");
+        doChunkGC = Timings.ofSafe(name + "doChunkGC");
+        doPortalForcer = Timings.ofSafe(name + "doPortalForcer");
+        entityTick = Timings.ofSafe(name + "entityTick");
+        entityRemoval = Timings.ofSafe(name + "entityRemoval");
+        tileEntityTick = Timings.ofSafe(name + "tileEntityTick");
+        tileEntityPending = Timings.ofSafe(name + "tileEntityPending");
+
+        syncChunkLoadTimer = Timings.ofSafe(name + "syncChunkLoad");
+        syncChunkLoadDataTimer = Timings.ofSafe(name + "syncChunkLoad - Data");
+        syncChunkLoadStructuresTimer = Timings.ofSafe(name + "chunkLoad - Structures");
+        syncChunkLoadEntitiesTimer = Timings.ofSafe(name + "chunkLoad - Entities");
+        syncChunkLoadTileEntitiesTimer = Timings.ofSafe(name + "chunkLoad - TileEntities");
+        syncChunkLoadTileTicksTimer = Timings.ofSafe(name + "chunkLoad - TileTicks");
+        syncChunkLoadPostTimer = Timings.ofSafe(name + "chunkLoad - Post");
+
+        tracker1 = Timings.ofSafe(name + "tracker stage 1");
+        tracker2 = Timings.ofSafe(name + "tracker stage 2");
+        doTick = Timings.ofSafe(name + "doTick");
+        tickEntities = Timings.ofSafe(name + "tickEntities");
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 046837249..7739e7812 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -14,11 +14,14 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
 
+import com.google.common.collect.Lists;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import co.aikar.timings.Timings;
+import co.aikar.timings.TimingsManager;
 
 public class PaperConfig {
 
@@ -161,4 +164,24 @@ public class PaperConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    private static void timings() {
+        boolean timings = getBoolean("timings.enabled", true);
+        boolean verboseTimings = getBoolean("timings.verbose", true);
+        TimingsManager.privacy = getBoolean("timings.server-name-privacy", false);
+        TimingsManager.hiddenConfigs = getList("timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses"));
+        int timingHistoryInterval = getInt("timings.history-interval", 300);
+        int timingHistoryLength = getInt("timings.history-length", 3600);
+
+
+        Timings.setVerboseTimingsEnabled(verboseTimings);
+        Timings.setTimingsEnabled(timings);
+        Timings.setHistoryInterval(timingHistoryInterval * 20);
+        Timings.setHistoryLength(timingHistoryLength * 20);
+
+        Bukkit.getLogger().log(Level.INFO, "Spigot Timings: " + timings +
+                " - Verbose: " + verboseTimings +
+                " - Interval: " + timeSummary(Timings.getHistoryInterval() / 20) +
+                " - Length: " + timeSummary(Timings.getHistoryLength() / 20));
+    }
 }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 8cee6fab2..321225557 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -33,6 +33,15 @@ public class Block {
     protected final BlockStateList blockStateList;
     private IBlockData blockData;
     private String name;
+    // Paper start
+    public co.aikar.timings.Timing timing;
+    public co.aikar.timings.Timing getTiming() {
+        if (timing == null) {
+            timing = co.aikar.timings.MinecraftTimings.getBlockTiming(this);
+        }
+        return timing;
+    }
+    // Paper end
 
     public static int getId(Block block) {
         return Block.REGISTRY.a(block); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6750d85a5..70994d463 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -21,7 +21,7 @@ import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -427,7 +427,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aL() {
-        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
+        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.serverCommandQueue.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
 
@@ -442,7 +442,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             // CraftBukkit end
         }
 
-        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
+        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean aa() {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 6ad99b04e..62ada23da 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -24,7 +24,8 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
 import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
@@ -141,7 +142,7 @@ public abstract class Entity implements ICommandListener {
     public boolean valid; // CraftBukkit
     public org.bukkit.projectiles.ProjectileSource projectileSource; // CraftBukkit - For projectiles only
     public boolean forceExplosionKnockback; // CraftBukkit - SPIGOT-949
-    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getEntityTimings(this); // Spigot
+    public Timing tickTimer = MinecraftTimings.getEntityTimings(this); // Paper
     // Spigot start
     public final byte activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
     public final boolean defaultActivationState;
@@ -464,7 +465,6 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void move(double d0, double d1, double d2) {
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
         if (this.noclip) {
             this.a(this.getBoundingBox().c(d0, d1, d2));
             this.recalcPosition();
@@ -805,7 +805,6 @@ public abstract class Entity implements ICommandListener {
 
             this.world.methodProfiler.b();
         }
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
     }
 
     public void recalcPosition() {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 5f84a701c..4d7be74a6 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -26,7 +26,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class EntityLiving extends Entity {
 
@@ -1707,7 +1707,6 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void m() {
-        SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.m();
         this.cv();
         if (!this.world.isClientSide) {
@@ -1780,9 +1779,7 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
-        SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
         this.n();
-        SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         double d0 = this.locX - this.lastX;
         double d1 = this.locZ - this.lastZ;
         float f = (float) (d0 * d0 + d1 * d1);
@@ -1851,8 +1848,6 @@ public abstract class EntityLiving extends Entity {
         } else {
             this.bp = 0;
         }
-
-        SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
     }
 
     protected float h(float f, float f1) {
@@ -1917,7 +1912,6 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.world.methodProfiler.a("ai");
-        SpigotTimings.timerEntityAI.startTiming(); // Spigot
         if (this.cg()) {
             this.bd = false;
             this.be = 0.0F;
@@ -1928,7 +1922,6 @@ public abstract class EntityLiving extends Entity {
             this.doTick();
             this.world.methodProfiler.b();
         }
-        SpigotTimings.timerEntityAI.stopTiming(); // Spigot
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("jump");
@@ -1951,14 +1944,10 @@ public abstract class EntityLiving extends Entity {
         this.bf *= 0.98F;
         this.bg *= 0.9F;
         this.r();
-        SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
         this.g(this.be, this.bf);
-        SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
-        SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
         this.co();
-        SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         this.world.methodProfiler.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index 68242d98a..2eea1c198 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -171,7 +171,7 @@ public class EntityTracker {
     public void updatePlayers() {
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.c.iterator();
-
+        world.timings.tracker1.startTiming(); // Spigot
         while (iterator.hasNext()) {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
@@ -184,7 +184,9 @@ public class EntityTracker {
                 }
             }
         }
+        world.timings.tracker1.stopTiming(); // Spigot
 
+        world.timings.tracker2.startTiming(); // Spigot
         for (int i = 0; i < arraylist.size(); ++i) {
             EntityPlayer entityplayer = (EntityPlayer) arraylist.get(i);
             Iterator iterator1 = this.c.iterator();
@@ -197,6 +199,7 @@ public class EntityTracker {
                 }
             }
         }
+        world.timings.tracker2.stopTiming(); // Spigot
 
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e17d5d330..8845ad257 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -50,7 +50,7 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 // CraftBukkit end
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
@@ -454,6 +454,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
         // CraftBukkit end
         MinecraftServer.LOGGER.info("Stopping server");
+        MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -651,7 +652,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     protected void B() {}
 
     protected void C() throws ExceptionWorldConflict { // CraftBukkit - added throws
-        SpigotTimings.serverTickTimer.startTiming(); // Spigot
+        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         long i = System.nanoTime();
 
         ++this.ticks;
@@ -678,7 +679,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
-            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
+            MinecraftTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.v.savePlayers();
             // Spigot Start
@@ -693,7 +694,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             // this.saveChunks(true);
             // Spigot End
             this.methodProfiler.b();
-            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
+            MinecraftTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.methodProfiler.a("tallying");
@@ -710,12 +711,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         this.methodProfiler.b();
         this.methodProfiler.b();
+
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        SpigotTimings.serverTickTimer.stopTiming(); // Spigot
-        org.spigotmc.CustomTimingsHandler.tick(); // Spigot
+        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
     public void D() {
+        MinecraftTimings.minecraftSchedulerTimer.startTiming(); // Paper
         this.methodProfiler.a("jobs");
         Queue queue = this.j;
 
@@ -726,26 +728,27 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             SystemUtils.a(entry, MinecraftServer.LOGGER);
          }
         // Spigot end
+        MinecraftTimings.minecraftSchedulerTimer.stopTiming(); // Paper
 
         this.methodProfiler.c("levels");
 
-        SpigotTimings.schedulerTimer.startTiming(); // Spigot
+        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Paper
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
-        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
+        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Paper
 
         // Run tasks that are waiting on processing
-        SpigotTimings.processQueueTimer.startTiming(); // Spigot
+        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
-        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
+        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
+        MinecraftTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
+        MinecraftTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
-        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
+        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
@@ -753,7 +756,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
-        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
+        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot
 
         int i;
 
@@ -810,9 +813,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
                 this.methodProfiler.b();
                 this.methodProfiler.a("tracker");
-                worldserver.timings.tracker.startTiming(); // Spigot
                 worldserver.getTracker().updatePlayers();
-                worldserver.timings.tracker.stopTiming(); // Spigot
                 this.methodProfiler.b();
                 this.methodProfiler.b();
             // } // CraftBukkit
@@ -821,20 +822,20 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         this.methodProfiler.c("connection");
-        SpigotTimings.connectionTimer.startTiming(); // Spigot
+        MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.am().c();
-        SpigotTimings.connectionTimer.stopTiming(); // Spigot
+        MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.methodProfiler.c("players");
-        SpigotTimings.playerListTimer.startTiming(); // Spigot
+        MinecraftTimings.playerListTimer.startTiming(); // Spigot
         this.v.tick();
-        SpigotTimings.playerListTimer.stopTiming(); // Spigot
+        MinecraftTimings.playerListTimer.stopTiming(); // Spigot
         this.methodProfiler.c("tickables");
 
-        SpigotTimings.tickablesTimer.startTiming(); // Spigot
+        MinecraftTimings.tickablesTimer.startTiming(); // Spigot
         for (i = 0; i < this.o.size(); ++i) {
             ((ITickable) this.o.get(i)).c();
         }
-        SpigotTimings.tickablesTimer.stopTiming(); // Spigot
+        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot
 
         this.methodProfiler.b();
     }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index b0249ffc0..797a84f9b 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import co.aikar.timings.Timing;
 import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.ComparisonChain;
@@ -106,6 +107,7 @@ public class PlayerChunkMap {
         PlayerChunk playerchunk;
 
         if (i - this.k > 8000L) {
+            try (Timing ignored = world.timings.doChunkMapUpdate.startTiming()) { // Paper
             this.k = i;
 
             for (j = 0; j < this.i.size(); ++j) {
@@ -113,9 +115,11 @@ public class PlayerChunkMap {
                 playerchunk.d();
                 playerchunk.c();
             }
+            } // Paper timing
         }
 
         if (!this.f.isEmpty()) {
+            try (Timing ignored = world.timings.doChunkMapToUpdate.startTiming()) { // Paper
             Iterator iterator = this.f.iterator();
 
             while (iterator.hasNext()) {
@@ -124,10 +128,12 @@ public class PlayerChunkMap {
             }
 
             this.f.clear();
+            } // Paper timing
         }
 
         if (this.l && i % 4L == 0L) {
             this.l = false;
+            try (Timing ignored = world.timings.doChunkMapSortMissing.startTiming()) { // Paper
             Collections.sort(this.h, new Comparator() {
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
@@ -137,10 +143,12 @@ public class PlayerChunkMap {
                     return this.a((PlayerChunk) object, (PlayerChunk) object1);
                 }
             });
+            } // Paper timing
         }
 
         if (this.m && i % 4L == 2L) {
             this.m = false;
+            try (Timing ignored = world.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
             Collections.sort(this.g, new Comparator() {
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
@@ -150,9 +158,11 @@ public class PlayerChunkMap {
                     return this.a((PlayerChunk) object, (PlayerChunk) object1);
                 }
             });
+            } // Paper timing
         }
 
         if (!this.h.isEmpty()) {
+            try (Timing ignored = world.timings.doChunkMapPlayersNeedingChunks.startTiming()) { // Paper
             long k = System.nanoTime() + 50000000L;
             int l = 49;
             Iterator iterator1 = this.h.iterator();
@@ -176,10 +186,12 @@ public class PlayerChunkMap {
                     }
                 }
             }
+            } // Paper timing
         }
 
         if (!this.g.isEmpty()) {
             j = 81;
+            try (Timing ignored = world.timings.doChunkMapPendingSendToPlayers.startTiming()) { // Paper
             Iterator iterator2 = this.g.iterator();
 
             while (iterator2.hasNext()) {
@@ -193,14 +205,17 @@ public class PlayerChunkMap {
                     }
                 }
             }
+            } // Paper timing
         }
 
         if (this.managedPlayers.isEmpty()) {
+            try (Timing ignored = world.timings.doChunkMapUnloadChunks.startTiming()) { // Paper
             WorldProvider worldprovider = this.world.worldProvider;
 
             if (!worldprovider.e()) {
                 this.world.getChunkProviderServer().b();
             }
+            } // Paper timing
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 0a14dd21c..7c52e154e 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -57,6 +57,7 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
+import co.aikar.timings.MinecraftTimings; // Paper
 // CraftBukkit end
 
 public class PlayerConnection implements PacketListenerPlayIn, ITickable {
@@ -1330,7 +1331,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     // CraftBukkit end
 
    private void handleCommand(String s) {
-        org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.startTiming(); // Spigot
+       MinecraftTimings.playerCommandTimer.startTiming(); // Paper
        // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
         this.LOGGER.info(this.player.getName() + " issued server command: " + s);
@@ -1341,22 +1342,22 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
             return;
         }
 
         try {
             if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
-                org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+                MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
                 return;
             }
         } catch (org.bukkit.command.CommandException ex) {
             player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
             java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
             return;
         }
-        org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+        MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
         // this.minecraftServer.getCommandHandler().a(this.player, s);
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 0cb2e6334..6d4f4e7ca 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -6,12 +6,13 @@ import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import org.bukkit.inventory.InventoryHolder; // CraftBukkit
 
 public abstract class TileEntity {
 
-    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getTileEntityTimings(this); // Spigot
+    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     private static final Logger a = LogManager.getLogger();
     private static Map<String, Class<? extends TileEntity>> f = Maps.newHashMap();
     private static Map<Class<? extends TileEntity>, String> g = Maps.newHashMap();
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 78045c5bd..7d1272b3f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -18,11 +18,11 @@ import com.google.common.collect.Maps;
 import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.LongHashSet; // Paper
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
@@ -127,7 +127,7 @@ public abstract class World implements IBlockAccess {
 
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
 
-    public final SpigotTimings.WorldTimingsHandler timings; // Spigot
+    public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     private boolean guardEntityList; // Spigot
     public static boolean haveWeSilencedAPhysicsCrash;
     public static String blockLocation;
@@ -197,7 +197,7 @@ public abstract class World implements IBlockAccess {
         });
         this.getServer().addWorld(this.world);
         // CraftBukkit end
-        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+        timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
                 this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
     }
@@ -1375,6 +1375,7 @@ public abstract class World implements IBlockAccess {
         }
 
         this.methodProfiler.c("remove");
+        timings.entityRemoval.startTiming(); // Paper
         this.entityList.removeAll(this.f);
 
         int j;
@@ -1395,6 +1396,7 @@ public abstract class World implements IBlockAccess {
 
         this.f.clear();
         this.l();
+        timings.entityRemoval.stopTiming(); // Paper
         this.methodProfiler.c("regular");
 
         CrashReportSystemDetails crashreportsystemdetails1;
@@ -1404,6 +1406,7 @@ public abstract class World implements IBlockAccess {
         timings.entityTick.startTiming(); // Spigot
         guardEntityList = true; // Spigot
         // CraftBukkit start - Use field for loop variable
+        co.aikar.timings.TimingHistory.entityTicks += this.entityList.size(); // Paper
         int entitiesThisCycle = 0;
         if (tickPosition < 0) tickPosition = 0;
         for (entityLimiter.initTick();
@@ -1425,10 +1428,11 @@ public abstract class World implements IBlockAccess {
             this.methodProfiler.a("tick");
             if (!entity.dead && !(entity instanceof EntityPlayer)) {
                 try {
-                    SpigotTimings.tickEntityTimer.startTiming(); // Spigot
+                    entity.tickTimer.startTiming(); // Paper
                     this.g(entity);
-                    SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
+                    entity.tickTimer.stopTiming(); // Paper
                 } catch (Throwable throwable1) {
+                    entity.tickTimer.stopTiming();
                     crashreport1 = CrashReport.a(throwable1, "Ticking entity");
                     crashreportsystemdetails1 = crashreport1.a("Entity being ticked");
                     entity.appendEntityCrashDetails(crashreportsystemdetails1);
@@ -1560,6 +1564,7 @@ public abstract class World implements IBlockAccess {
         }
 
         timings.tileEntityPending.stopTiming(); // Spigot
+        co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityListTick.size(); // Paper
         this.methodProfiler.b();
         this.methodProfiler.b();
     }
@@ -1605,7 +1610,6 @@ public abstract class World implements IBlockAccess {
             entity.ticksLived++;
             entity.inactiveTick();
         } else {
-            entity.tickTimer.startTiming(); // Spigot
             // CraftBukkit end
             entity.M = entity.locX;
             entity.N = entity.locY;
@@ -1614,6 +1618,7 @@ public abstract class World implements IBlockAccess {
             entity.lastPitch = entity.pitch;
             if (flag && entity.aa) {
                 ++entity.ticksLived;
+                ++co.aikar.timings.TimingHistory.activatedEntityTicks; // Paper
                 if (entity.isPassenger()) {
                     entity.aw();
                 } else {
@@ -1672,8 +1677,6 @@ public abstract class World implements IBlockAccess {
                     }
                 }
             }
-
-            entity.tickTimer.stopTiming(); // Spigot
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index f8ef4978e..4980c7a75 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -245,13 +245,13 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         timings.doChunkUnload.stopTiming(); // Spigot
         this.methodProfiler.c("tickPending");
-        timings.doTickPending.startTiming(); // Spigot
+        timings.scheduledBlocks.startTiming(); // Paper
         this.a(false);
-        timings.doTickPending.stopTiming(); // Spigot
+        timings.scheduledBlocks.stopTiming(); // Paper
         this.methodProfiler.c("tickBlocks");
-        timings.doTickTiles.startTiming(); // Spigot
+        timings.chunkTicks.startTiming(); // Paper
         this.j();
-        timings.doTickTiles.stopTiming(); // Spigot
+        timings.chunkTicks.stopTiming(); // Paper
         this.methodProfiler.c("chunkMap");
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
@@ -483,7 +483,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                this.methodProfiler.c("tickBlocks");
+                timings.chunkTicksBlocks.startTiming(); // Paper
                 if (i > 0) {
                     ChunkSection[] achunksection = chunk.getSections();
                     int i1 = achunksection.length;
@@ -511,6 +511,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                         }
                     }
                 }
+                timings.chunkTicksBlocks.stopTiming(); // Paper
             }
 
             this.methodProfiler.b();
@@ -706,6 +707,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 this.methodProfiler.a("cleaning");
 
+                timings.scheduledBlocksCleanup.startTiming(); // Paper
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
@@ -719,9 +721,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     // this.nextTickListHash.remove(nextticklistentry);
                     this.U.add(nextticklistentry);
                 }
+                timings.scheduledBlocksCleanup.stopTiming(); // Paper
 
                 this.methodProfiler.b();
                 this.methodProfiler.a("ticking");
+                timings.scheduledBlocksTicking.startTiming(); // Paper
                 Iterator iterator = this.U.iterator();
 
                 while (iterator.hasNext()) {
@@ -731,6 +735,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                     if (this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
                         IBlockData iblockdata = this.getType(nextticklistentry.a);
+                        co.aikar.timings.Timing timing = iblockdata.getBlock().getTiming(); // Paper
+                        timing.startTiming(); // Paper
 
                         if (iblockdata.getMaterial() != Material.AIR && Block.a(iblockdata.getBlock(), nextticklistentry.a())) {
                             try {
@@ -743,10 +749,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                                 throw new ReportedException(crashreport);
                             }
                         }
+                        timing.stopTiming(); // Paper
                     } else {
                         this.a(nextticklistentry.a, nextticklistentry.a(), 0);
                     }
                 }
+                timings.scheduledBlocksTicking.stopTiming(); // Paper
 
                 this.methodProfiler.b();
                 this.U.clear();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 12156d4bf..f0db144a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1726,12 +1726,31 @@ public final class CraftServer implements Server {
     private final Spigot spigot = new Spigot()
     {
 
+        @Deprecated
         @Override
         public YamlConfiguration getConfig()
         {
             return org.spigotmc.SpigotConfig.config;
         }
 
+        @Override
+        public YamlConfiguration getBukkitConfig()
+        {
+            return configuration;
+        }
+
+        @Override
+        public YamlConfiguration getSpigotConfig()
+        {
+            return org.spigotmc.SpigotConfig.config;
+        }
+
+        @Override
+        public YamlConfiguration getPaperConfig()
+        {
+            return com.destroystokyo.paper.PaperConfig.config;
+        }
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
deleted file mode 100644
index 41d2d87ee..000000000
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package org.bukkit.craftbukkit;
-
-import com.google.common.collect.Maps;
-import net.minecraft.server.*;
-import org.bukkit.plugin.java.JavaPluginLoader;
-import org.spigotmc.CustomTimingsHandler;
-import org.bukkit.scheduler.BukkitTask;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.bukkit.craftbukkit.scheduler.CraftTask;
-
-public class SpigotTimings {
-
-    public static final CustomTimingsHandler serverTickTimer = new CustomTimingsHandler("** Full Server Tick");
-    public static final CustomTimingsHandler playerListTimer = new CustomTimingsHandler("Player List");
-    public static final CustomTimingsHandler connectionTimer = new CustomTimingsHandler("Connection Handler");
-    public static final CustomTimingsHandler tickablesTimer = new CustomTimingsHandler("Tickables");
-    public static final CustomTimingsHandler schedulerTimer = new CustomTimingsHandler("Scheduler");
-    public static final CustomTimingsHandler chunkIOTickTimer = new CustomTimingsHandler("ChunkIOTick");
-    public static final CustomTimingsHandler timeUpdateTimer = new CustomTimingsHandler("Time Update");
-    public static final CustomTimingsHandler serverCommandTimer = new CustomTimingsHandler("Server Command");
-    public static final CustomTimingsHandler worldSaveTimer = new CustomTimingsHandler("World Save");
-
-    public static final CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
-    public static final CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity");
-    public static final CustomTimingsHandler activatedEntityTimer = new CustomTimingsHandler("** activatedTickEntity");
-    public static final CustomTimingsHandler tickTileEntityTimer = new CustomTimingsHandler("** tickTileEntity");
-
-    public static final CustomTimingsHandler timerEntityBaseTick = new CustomTimingsHandler("** livingEntityBaseTick");
-    public static final CustomTimingsHandler timerEntityAI = new CustomTimingsHandler("** livingEntityAI");
-    public static final CustomTimingsHandler timerEntityAICollision = new CustomTimingsHandler("** livingEntityAICollision");
-    public static final CustomTimingsHandler timerEntityAIMove = new CustomTimingsHandler("** livingEntityAIMove");
-    public static final CustomTimingsHandler timerEntityTickRest = new CustomTimingsHandler("** livingEntityTickRest");
-
-    public static final CustomTimingsHandler processQueueTimer = new CustomTimingsHandler("processQueue");
-    public static final CustomTimingsHandler schedulerSyncTimer = new CustomTimingsHandler("** Scheduler - Sync Tasks", JavaPluginLoader.pluginParentTimer);
-
-    public static final CustomTimingsHandler playerCommandTimer = new CustomTimingsHandler("** playerCommand");
-
-    public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
-    public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
-
-    public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
-    public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
-    public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
-
-    /**
-     * Gets a timer associated with a plugins tasks.
-     * @param task
-     * @param period
-     * @return
-     */
-    public static CustomTimingsHandler getPluginTaskTimings(BukkitTask task, long period) {
-        if (!task.isSync()) {
-            return null;
-        }
-        String plugin;
-        final CraftTask ctask = (CraftTask) task;
-
-        if (task.getOwner() != null) {
-            plugin = task.getOwner().getDescription().getFullName();
-        } else if (ctask.timingName != null) {
-            plugin = "CraftScheduler";
-        } else {
-            plugin = "Unknown";
-        }
-        String taskname = ctask.getTaskName();
-
-        String name = "Task: " + plugin + " Runnable: " + taskname;
-        if (period > 0) {
-            name += "(interval:" + period +")";
-        } else {
-            name += "(Single)";
-        }
-        CustomTimingsHandler result = pluginTaskTimingMap.get(name);
-        if (result == null) {
-            result = new CustomTimingsHandler(name, SpigotTimings.schedulerSyncTimer);
-            pluginTaskTimingMap.put(name, result);
-        }
-        return result;
-    }
-
-    /**
-     * Get a named timer for the specified entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static CustomTimingsHandler getEntityTimings(Entity entity) {
-        String entityType = entity.getClass().getSimpleName();
-        CustomTimingsHandler result = entityTypeTimingMap.get(entityType);
-        if (result == null) {
-            result = new CustomTimingsHandler("** tickEntity - " + entityType, activatedEntityTimer);
-            entityTypeTimingMap.put(entityType, result);
-        }
-        return result;
-    }
-
-    /**
-     * Get a named timer for the specified tile entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static CustomTimingsHandler getTileEntityTimings(TileEntity entity) {
-        String entityType = entity.getClass().getSimpleName();
-        CustomTimingsHandler result = tileEntityTypeTimingMap.get(entityType);
-        if (result == null) {
-            result = new CustomTimingsHandler("** tickTileEntity - " + entityType, tickTileEntityTimer);
-            tileEntityTypeTimingMap.put(entityType, result);
-        }
-        return result;
-    }
-
-    /**
-     * Set of timers per world, to track world specific timings.
-     */
-    public static class WorldTimingsHandler {
-        public final CustomTimingsHandler mobSpawn;
-        public final CustomTimingsHandler doChunkUnload;
-        public final CustomTimingsHandler doPortalForcer;
-        public final CustomTimingsHandler doTickPending;
-        public final CustomTimingsHandler doTickTiles;
-        public final CustomTimingsHandler doVillages;
-        public final CustomTimingsHandler doChunkMap;
-        public final CustomTimingsHandler doChunkGC;
-        public final CustomTimingsHandler doSounds;
-        public final CustomTimingsHandler entityTick;
-        public final CustomTimingsHandler tileEntityTick;
-        public final CustomTimingsHandler tileEntityPending;
-        public final CustomTimingsHandler tracker;
-        public final CustomTimingsHandler doTick;
-        public final CustomTimingsHandler tickEntities;
-
-        public final CustomTimingsHandler syncChunkLoadTimer;
-        public final CustomTimingsHandler syncChunkLoadDataTimer;
-        public final CustomTimingsHandler syncChunkLoadStructuresTimer;
-        public final CustomTimingsHandler syncChunkLoadEntitiesTimer;
-        public final CustomTimingsHandler syncChunkLoadTileEntitiesTimer;
-        public final CustomTimingsHandler syncChunkLoadTileTicksTimer;
-        public final CustomTimingsHandler syncChunkLoadPostTimer;
-
-        public WorldTimingsHandler(World server) {
-            String name = server.worldData.getName() +" - ";
-
-            mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
-            doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
-            doTickPending = new CustomTimingsHandler("** " + name + "doTickPending");
-            doTickTiles = new CustomTimingsHandler("** " + name + "doTickTiles");
-            doVillages = new CustomTimingsHandler("** " + name + "doVillages");
-            doChunkMap = new CustomTimingsHandler("** " + name + "doChunkMap");
-            doSounds = new CustomTimingsHandler("** " + name + "doSounds");
-            doChunkGC = new CustomTimingsHandler("** " + name + "doChunkGC");
-            doPortalForcer = new CustomTimingsHandler("** " + name + "doPortalForcer");
-            entityTick = new CustomTimingsHandler("** " + name + "entityTick");
-            tileEntityTick = new CustomTimingsHandler("** " + name + "tileEntityTick");
-            tileEntityPending = new CustomTimingsHandler("** " + name + "tileEntityPending");
-
-            syncChunkLoadTimer = new CustomTimingsHandler("** " + name + "syncChunkLoad");
-            syncChunkLoadDataTimer = new CustomTimingsHandler("** " + name + "syncChunkLoad - Data");
-            syncChunkLoadStructuresTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Structures");
-            syncChunkLoadEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Entities");
-            syncChunkLoadTileEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileEntities");
-            syncChunkLoadTileTicksTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileTicks");
-            syncChunkLoadPostTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Post");
-
-
-            tracker = new CustomTimingsHandler(name + "tracker");
-            doTick = new CustomTimingsHandler(name + "doTick");
-            tickEntities = new CustomTimingsHandler(name + "tickEntities");
-        }
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 46882f1c1..35f6c2784 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -37,15 +37,9 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.CraftParticle;
+import org.bukkit.craftbukkit.*;
 import org.bukkit.craftbukkit.block.CraftSign;
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
-import org.bukkit.craftbukkit.CraftEffect;
-import org.bukkit.craftbukkit.CraftOfflinePlayer;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftSound;
-import org.bukkit.craftbukkit.CraftStatistic;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
@@ -1545,6 +1539,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             packet.components = components;
             getHandle().playerConnection.sendPacket(packet);
         }
+
+        @Override
+        public int getPing()
+        {
+            return getHandle().ping;
+        }
     };
 
     public Player.Spigot spigot()
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 93d8d4248..2a2269721 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -186,7 +186,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                         return false;
-                    }});
+                    }}){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -219,7 +219,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                     }
-                });
+                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);}}; // Paper
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -251,7 +251,7 @@ public class CraftScheduler implements BukkitScheduler {
                         CraftScheduler.this.pending.clear();
                         CraftScheduler.this.temp.clear();
                     }
-                });
+                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -346,9 +346,7 @@ public class CraftScheduler implements BukkitScheduler {
             }
             if (task.isSync()) {
                 try {
-                    task.timings.startTiming(); // Spigot
                     task.run();
-                    task.timings.stopTiming(); // Spigot
                 } catch (final Throwable throwable) {
                     task.getOwner().getLogger().log(
                             Level.WARNING,
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 220e39abe..afc6c17e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -1,8 +1,8 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
@@ -20,11 +20,11 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      */
     private volatile long period;
     private long nextRun;
-    private final Runnable task;
+    public final Runnable task; // Paper
+    public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
 
-    final CustomTimingsHandler timings; // Spigot
     CraftTask() {
         this(null, null, -1, -1);
     }
@@ -33,26 +33,12 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this(null, task, -1, -1);
     }
 
-    // Spigot start
-    public String timingName = null;
-    CraftTask(String timingName) {
-        this(timingName, null, null, -1, -1);
-    }
-    CraftTask(String timingName, final Runnable task) {
-        this(timingName, null, task, -1, -1);
-    }
-    CraftTask(String timingName, final Plugin plugin, final Runnable task, final int id, final long period) {
+    CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) { // Paper
         this.plugin = plugin;
         this.task = task;
         this.id = id;
         this.period = period;
-        this.timingName = timingName == null && task == null ? "Unknown" : timingName;
-        timings = this.isSync() ? SpigotTimings.getPluginTaskTimings(this, period) : null;
-    }
-
-    CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) {
-        this(null, plugin, task, id, period);
-    // Spigot end
+        timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : null; // Paper
     }
 
     public final int getTaskId() {
@@ -68,7 +54,9 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     public void run() {
+        if (timings != null && isSync()) timings.startTiming(); // Paper
         task.run();
+        if (timings != null && isSync()) timings.stopTiming(); // Paper
     }
 
     long getPeriod() {
@@ -112,13 +100,4 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         setPeriod(-2l);
         return true;
     }
-
-    // Spigot start
-    public String getTaskName() {
-        if (timingName != null) {
-            return timingName;
-        }
-        return task.getClass().getName();
-    }
-    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
index e52ef47b7..3d90b3426 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
@@ -5,6 +5,7 @@ import org.bukkit.util.CachedServerIcon;
 public class CraftIconCache implements CachedServerIcon {
     public final String value;
 
+    public String getData() { return value; } // Paper
     public CraftIconCache(final String value) {
         this.value = value;
     }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index a75237686..8870607ad 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -29,7 +29,7 @@ import net.minecraft.server.EntityWither;
 import net.minecraft.server.MathHelper;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.World;
-import org.bukkit.craftbukkit.SpigotTimings;
+import co.aikar.timings.MinecraftTimings;
 
 public class ActivationRange
 {
@@ -63,8 +63,8 @@ public class ActivationRange
     /**
      * These entities are excluded from Activation range checks.
      *
-     * @param entity
-     * @param world
+     * @param entity Entity to initialize
+     * @param config Spigot config to determine ranges
      * @return boolean If it should always tick.
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
@@ -97,7 +97,7 @@ public class ActivationRange
      */
     public static void activateEntities(World world)
     {
-        SpigotTimings.entityActivationCheckTimer.startTiming();
+        MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
         final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
@@ -131,7 +131,7 @@ public class ActivationRange
                 }
             }
         }
-        SpigotTimings.entityActivationCheckTimer.stopTiming();
+        MinecraftTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
@@ -245,11 +245,9 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
-        SpigotTimings.checkIfActiveTimer.startTiming();
         // Never safe to skip fireworks or entities not yet added to chunk
         // PAIL: inChunk
         if ( !entity.aa || entity instanceof EntityFireworks ) {
-            SpigotTimings.checkIfActiveTimer.stopTiming();
             return true;
         }
 
@@ -281,7 +279,6 @@ public class ActivationRange
         {
             isActive = false;
         }
-        SpigotTimings.checkIfActiveTimer.stopTiming();
         return isActive;
     }
 }
-- 
2.34.0

