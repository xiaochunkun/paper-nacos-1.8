From 1bba159601a998917f3ebe31c6b6642951a02ef7 Mon Sep 17 00:00:00 2001
From: CullanP <cullanpage@gmail.com>
Date: Thu, 3 Mar 2016 02:13:38 -0600
Subject: [PATCH] Avoid hopper searches if there are no items

Hoppers searching for items and minecarts is the most expensive part of hopper ticking.
We keep track of the number of minecarts and items in a chunk.
If there are no items in the chunk, we skip searching for items.
If there are no minecarts in the chunk, we skip searching for them.

Usually hoppers aren't near items, so we can skip most item searches.
And since minecart hoppers are used _very_ rarely near we can avoid alot of searching there.

Combined, this adds up a lot.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 3806def..acce7cb 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -47,6 +47,13 @@ public class Chunk {
     public boolean d;
     protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
 
+    // Paper start
+    // Track the number of minecarts and items
+    // Keep this synced with entitySlices.add() and entitySlices.remove()
+    private final int[] itemCounts = new int[16];
+    private final int[] inventoryEntityCounts = new int[16];
+    // Paper end
+
     // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
     private int neighbors = 0x1 << 12;
 
@@ -625,6 +632,13 @@ public class Chunk {
         entity.ac = k;
         entity.ad = this.locZ;
         this.entitySlices[k].add(entity);
+        // Paper start - update count
+        if (entity instanceof EntityItem) {
+            itemCounts[k]++;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[k]++;
+        }
+        // Paper end
         // Spigot start - increment creature type count
         // Keep this synced up with World.a(Class)
         if (entity instanceof EntityInsentient) {
@@ -657,6 +671,13 @@ public class Chunk {
         }
 
         this.entitySlices[i].remove(entity);
+        // Paper start - update counts
+        if (entity instanceof EntityItem) {
+            itemCounts[i]--;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[i]--;
+        }
+        // Paper end
         // Spigot start - decrement creature type count
         // Keep this synced up with World.a(Class)
         if (entity instanceof EntityInsentient) {
@@ -848,6 +869,15 @@ public class Chunk {
             if (!this.entitySlices[k].isEmpty()) {
                 Iterator iterator = this.entitySlices[k].iterator();
 
+                // Paper start - Don't search for inventories if we have none, and that is all we want
+                /*
+                * We check if they want inventories by seeing if it is the static `IEntitySelector.c`
+                *
+                * Make sure the inventory selector stays in sync.
+                * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+                */
+                if (predicate == IEntitySelector.c && inventoryEntityCounts[k] <= 0) continue;
+                // Paper end
                 while (iterator.hasNext()) {
                     Entity entity1 = (Entity) iterator.next();
 
@@ -880,7 +910,18 @@ public class Chunk {
         i = MathHelper.clamp(i, 0, this.entitySlices.length - 1);
         j = MathHelper.clamp(j, 0, this.entitySlices.length - 1);
 
+        // Paper start
+        int[] counts;
+        if (EntityItem.class.isAssignableFrom(oclass)) {
+            counts = itemCounts;
+        } else if (IInventory.class.isAssignableFrom(oclass)) {
+            counts = inventoryEntityCounts;
+        } else {
+            counts = null;
+        }
+        // Paper end
         for (int k = i; k <= j; ++k) {
+            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             Iterator iterator = this.entitySlices[k].iterator(); // Spigot
 
             while (iterator.hasNext()) {
-- 
2.8.2

